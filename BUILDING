lwIPのビルド
=============

lwIPはCMakeベースのビルドシステムを使用しています。

このプロジェクトのCMakeファイルはあなた自身のCMakeファイルに
インクルードされるように設計されています。これらは主に、
ソースファイルとアプリケーションコードにリンクされるべき事前
定義されたスタティックライブラリのリストを含む変数定義です。

1) lwIPソース:
   src/Filelists.cmake はlwIPコアライブラリを含むファイル
   リストを提供します。
   ファイルには2つのスタティックライブラリ, lwipcoreと
   plwipallappsも含まれており、アプリケーションにリンクする
   ことができます。これはすべてのlwIPユーザの役に立つファイルです。

2) サンプルアプリケーション:
   contrib/Filelists.cmake はサンプルアプリケーションを含む
   ファイルリストを提供します。
   このファイルにはこれらのサンプルのためのスタティックライブラリも
   含まれていmす。
   このファイルが役に立つのはサンプルがアプリケーションで使える
   場合だけであり、通常そのようなケースはありません。

3) OS/プラットフォームのポート:
   通常、OSのポートはユーザーが提供する必要があります。
   Linux、Windows、MacOSへの移植が役に立つのであれば
   これらのOS用のファイルリストとライブラリを含む
   contrib/ports/{win32, unix}/Filelist.cmakeを使うことができます。

変数
=========
すべてのケースで次の2つの変数を指定する必要があります。

"LWIP_DIR" lwIPディレクトリを指します。
例:
set(LWIP_DIR ${CMAKE_CURRENT_SOURCE_DIR}/externals/lwip)

"LWIP_INCLUDE_DIRS" 次のincludeベースパスを含みます。
- lwIP自体用 (${LWIP_DIR}/src/include)
- 使用する場合は、lwIP contrib用 (${LWIP_DIR}/contrib)
- OSポートを含むディレクトリ
-lwpopts.hを含むディレクトリ

例:
set (LWIP_INCLUDE_DIRS
    "${LWIP_DIR}/src/include"
    "${LWIP_DIR}/contrib"
    "${LWIP_DIR}/contrib/ports/unix/port/include"
    "${LWIP_DIR}/contrib/examples/example_app"
)

以上をまとめる
=======================
動作するアプリケーションを作成するに、あなたのCMakeシステムは
上で述べた変数を提供する必要があります。たとえば、
set (LWIP_DIR <path to lwip sources>)
set (LWIP_INCLUDE_DIRS
    "${LWIP_DIR}/src/include"
    "${LWIP_DIR}/contrib"
    "<path to my port>/include"
    "<path to lwipopts.h>"
)

定義を追加することができます:
set (LWIP_DEFINITIONS LWIP_DEBUG=1)

次に必要なファイルリストをincludeします:
include(${LWIP_DIR}/src/Filelists.cmake)
include(${LWIP_DIR}/contrib/Filelists.cmake)

次に、executableを宣言します:
add_executable(my_app <my source files> <my lwip port files>)

アプリケーションにlwIPのincludeディレクトリを追加します:
target_include_directories(my_app PRIVATE ${LWIP_INCLUDE_DIRS})

ファイルリストから必要なlwIPライブラリをアプリケーションにリンクします:
target_link_libraries(my_app lwipcontribapps lwipallapps lwipcore)

動作する例
===============
動作するビルド例は contrib/ports/{win32, unix}/example_app サブ
ディレクトリにあります。これらを使用するには、ビルドディレクトリを
作成して、lwIPルートディレクトリでcmakeを呼び出します:

- mkdir build
- cd build
- cmake ..
- cmake --build .

CMakeLists.txt は使用しているシステム用の正しいポートを自動的に
選択します（サポート済: Linux, Windows, Darwin）.

必要に応じてサンプルappを構成するには次のファイル
    contrib/examples/example_app/lwipcfg.h.example
を
    contrib/examples/example_app/lwipcfg.h
にコピーして必要に応じて編集する必要があります。

Makefileベースのビルドシステム
==============================

lwIPはMakefileベースのビルドシステム用のファイルリストも
管理しています。ソースツリーのFilelists.mkファイルを探して
ください。私たちはそれらを維持しようとしていますが、lwIPが
主にフォーカスしているビルドシステムはCMakeです。

MS Visual Studio
================

lwIPは 'msvc' 下のwin32 portフォルダでMSVSの基本的なサポートを
提供しています。私たちはこれらのファイルを保守しようとしますが、
lwIPの主なビルドシステムはCMakeです。
